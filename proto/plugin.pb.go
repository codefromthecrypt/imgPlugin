// Code generated by protoc-gen-go-plugin. DO NOT EDIT.
// versions:
// 	protoc-gen-go-plugin v0.1.0
// 	protoc               v3.21.9
// source: plugin.proto

package proto

import (
	context "context"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PluginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcPath    string            `protobuf:"bytes,1,opt,name=src_path,json=srcPath,proto3" json:"src_path,omitempty"`
	DestPath   string            `protobuf:"bytes,2,opt,name=dest_path,json=destPath,proto3" json:"dest_path,omitempty"`
	Parameters map[string]string `protobuf:"bytes,3,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Quality    int32             `protobuf:"varint,4,opt,name=quality,proto3" json:"quality,omitempty"`
}

func (x *PluginRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *PluginRequest) GetSrcPath() string {
	if x != nil {
		return x.SrcPath
	}
	return ""
}

func (x *PluginRequest) GetDestPath() string {
	if x != nil {
		return x.DestPath
	}
	return ""
}

func (x *PluginRequest) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *PluginRequest) GetQuality() int32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

type PluginReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PluginReply) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *PluginReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// go:plugin type=plugin version=1
type Actuator interface {
	Modify(context.Context, PluginRequest) (PluginReply, error)
}
